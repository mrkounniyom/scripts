Introduction
   Git tutorial from -> [https://git-scm.com/docs/gittutorial]
Going over git basics.
This tutorial explains how to import a new project into Git, make changes to it, and share changes with other developers.
If you are instead primarily interested in using Git to fetch a project, for example, to test the latest version, you may prefer to start with the first two chapters of The Git User’s Manual.
You can use Help or Manpages to get command information from the command line.
Start by adding name/email
$ git config --global user.name "Your Name Comes Here"
$ git config --global user.email you@yourdomain.example.com

   You can import new projects.
      Assume you have a tarball project.tar.gz with your initial work. You can place it under Git revision control as follows.
$ tar xzf project.tar.gz
$ cd project
$ git init
git will reply with an initialization message.
git add , git commit are self explanatory.
git commit -m will allow you to add a message to the commit line.

   Making Changes
      Use git add to add some files to the index. 'git diff' will show changes that have not been added. 'git diff --cahed' will show changes that have been added.
Alternatively, instead of running git add beforehand, you can use
    ``$ git commit -a``
which will automatically notice any modified (but not new) files, add them to the index, and commit, all in one step.
A note on commit messages: Though not required, it’s a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, git-format-patch[1] turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.

   Git tracks content not files
      Many revision control systems provide an `add` command that tells the system to start tracking changes to a new file. Git Add takes a different approach and tracks new and newly modified files. Takes a snapshot and stages that to an index.

   Viewing Project History
      At any point you can view the history of your changes using
$ git log
If you also want to see complete diffs at each step, use
$ git log -p
Often the overview of the change is useful to get a feel of each step
$ git log --stat --summary

   Managing branches
      A single Git repo can maintain many brances of development.
Using 'git branch xyz' can create a new branch.
Then 'git branch' can list existing branches.
Using the 'switch' command can change to the branch.
Git Branch -D can delete branches.

   Using git for collaboration
      You can use git clone to 'clone' a repo from another git source. An owner can change the repo, then the cloner can pull down those changes to the master.
Pull can fetch changes and merge them. Initially, the user wouldw ant to commit their changes before initiating a pull.
When you are working in a small closely knit group, it is not unusual to interact with the same repository over and over again. By defining remote repository shorthand, you can make it easier:
> alice$ git remote add bob /home/bob/myrepo
With this, Alice can perform the first part of the "pull" operation alone using the git fetch command without merging them with her own branch, using:
> alice$ git fetch bob
Unlike the longhand form, when Alice fetches from Bob using a remote repository shorthand set up with git remote, what was fetched is stored in a remote-tracking branch, in this case bob/master. So after this:
> alice$ git log -p master..bob/master

   Exploring history
      Git log can show you the commit name which you can run 'git show' with the name to see its details.
Git tag can add your own names to a commit.
git reset can reset the current branch and working directory.
git revert can undo changes.
git grep can search for strings in a project.

Part 2
   -> https://git-scm.com/docs/gittutorial-2


